//
//  PiTester.swift
//  Numbers
//
//  Created by Stephan Jancar on 29.12.17.
//  Copyright © 2017 Stephan Jancar. All rights reserved.
//

import Foundation
import BigInt
import BigFloat

extension String {
	func asBigFloat() -> BigFloat {
		var pre = ""
		var post = ""
		var postfaktor = BigFloat(1)
		var hasdecimal = false
		for c in self {
			if c == "." {
				hasdecimal = true
				continue
			}
			if hasdecimal {
				postfaktor = postfaktor * BigFloat(10)
				post = post + String(c)
			}
			else {
				pre = pre + String(c)
			}
		}
		let p1 = BigInt(pre) ?? BigInt(0)
		let p2 = BigInt(post) ?? BigInt(0)
		let ans = BigFloat(p1) + BigFloat(p2) / postfaktor
		return ans
	}
}

extension BigFloatConstant {
	static var gamma : BigFloat {
		return "0.5772156649015328606065120900824024310421593359399235988057672348848677267776646709369470632917467495".asBigFloat()
	}
	static var mills: BigFloat {
		return "1.3063778838630806904686144926026057129167845851567136443680537599664340537668265988215014037011973957".asBigFloat()
	}
	static var bruns : BigFloat {
			return "1.902160583104".asBigFloat()
	}
}


enum MathConstantType : Int {
	case pi = 0
	case e
	case gamma
	case mill
	case bruns
	case root2
	case ln2
	case pisquare
	case phi
	case crt2
	
	
	static let allValues = [pi,e,gamma,mill,bruns,root2,ln2,pisquare,phi,crt2]
	static let name = ["π","e","γ","θ","B2","√2","ln(2)","π^2","φ",",∛2",]
	private static let latex = ["\\pi","e","\\gamma","\\theta","B_{2}","\\sqrt{2}","ln(2)","\\pi^2","\\phi","\\sqrt[3]{2}"]
	
	func asString() -> String {
		return MathConstant.shared.dict[self] ?? ""
	}
	func withPot() -> Int{
		switch self {
		case .pi, .e, .pisquare,.root2,.mill,.phi,.crt2,.bruns:
			return 0
		case .ln2, .gamma:
			return -1
		}
	}
	func Latex() -> String {
		return MathConstantType.latex[self.rawValue]
	}
	func Symbol() -> String {
		return MathConstantType.name[self.rawValue]
	}
	
	func asDouble() -> Double {
		switch self {
		case .pi:
			return Double.pi
		case .e:
			return exp(1.0)
		case .root2:
			return sqrt(2.0)
		case .ln2:
			return log(2.0)
		case .gamma:
			return Double.gamma
		case .mill:
			return Double.mill
		case .pisquare:
			return Double.pi * Double.pi
		case .phi:
			return Double.phi
		case .crt2:
			return pow(2.0,1.0/3.0)
		case .bruns:
			return Double(1.902160583104)
		}
	}
}

class MathConstant {
	var dict : [MathConstantType:String] = [:]
	static var shared = MathConstant()
	private init() {
		for type in MathConstantType.allValues {
			#if false
			let val = Value(type: type)
			let s = val.asString(10, maxlen: 2000, fix: 2000)
			print(s)
				#else
				let s = ValueStr(type: type)
				#endif
			
			let s0 = s.replacingOccurrences(of: "0.", with: "")
			let s1 = s0.replacingOccurrences(of: ".", with: "")
			dict[type] = s1
		}
	}
	
	private func ValueStr(type: MathConstantType) -> String {
		switch type {
		case .pi:
			return "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989"
		case .e:
			return "2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274274663919320030599218174135966290435729003342952605956307381323286279434907632338298807531952510190115738341879307021540891499348841675092447614606680822648001684774118537423454424371075390777449920695517027618386062613313845830007520449338265602976067371132007093287091274437470472306969772093101416928368190255151086574637721112523897844250569536967707854499699679468644549059879316368892300987931277361782154249992295763514822082698951936680331825288693984964651058209392398294887933203625094431173012381970684161403970198376793206832823764648042953118023287825098194558153017567173613320698112509961818815930416903515988885193458072738667385894228792284998920868058257492796104841984443634632449684875602336248270419786232090021609902353043699418491463140934317381436405462531520961836908887070167683964243781405927145635490613031072085103837505101157477041718986106873969655212671546889570350354021234078498193343210681701210056278802351930332247450158539047304199577770935036604169973297250886876966403555707162268447162"
		case .phi:
			return "1.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189391137484754088075386891752126633862223536931793180060766726354433389086595939582905638322661319928290267880675208766892501711696207032221043216269548626296313614438149758701220340805887954454749246185695364864449241044320771344947049565846788509874339442212544877066478091588460749988712400765217057517978834166256249407589069704000281210427621771117778053153171410117046665991466979873176135600670874807101317952368942752194843530567830022878569978297783478458782289110976250030269615617002504643382437764861028383126833037242926752631165339247316711121158818638513316203840052221657912866752946549068113171599343235973494985090409476213222981017261070596116456299098162905552085247903"
		case .gamma:
			return "0.5772156649015328606065120900824024310421593359399235988057672348848677267776646709369470632917467495146314472498070824809605040144865428362241739976449235362535003337429373377376739427925952582470949160087352039481656708532331517766115286211995015079847937450857057400299213547861466940296043254215190587755352673313992540129674205137541395491116851028079842348775872050384310939973613725530608893312676001724795378367592713515772261027349291394079843010341777177808815495706610750101619166334015227893586796549725203621287922655595366962817638879272680132431010476505963703947394957638906572967929601009015125195950922243501409349871228247949747195646976318506676129063811051824197444867836380861749455169892792301877391072945781554316005002182844096053772434203285478367015177394398700302370339518328690001558193988042707411542227819716523011073565833967348717650491941812300040654693142999297779569303100503086303418569803231083691640025892970890985486825777364288253954925873629596133298574739302373438847070370284412920166417850248733379080562754998434590761643167103146710722370021810745044418664759134803669025532458625442225345181387912434573501361297782278288"
		case .root2:
			return "1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727350138462309122970249248360558507372126441214970999358314132226659275055927557999505011527820605714701095599716059702745345968620147285174186408891986095523292304843087143214508397626036279952514079896872533965463318088296406206152583523950547457502877599617298355752203375318570113543746034084988471603868999706990048150305440277903164542478230684929369186215805784631115966687130130156185689872372352885092648612494977154218334204285686060146824720771435854874155657069677653720226485447015858801620758474922657226002085584466521458398893944370926591800311388246468157082630100594858704003186480342194897278290641045072636881313739855256117322040245091227700226941127573627280495738108967504018369868368450725799364729060762996941380475654823728997180326802474420629269124859052181004459842150591120249441341728531478105803"
		case .crt2:
			return "1.25992104989487316476721060727822835057025146470150798008197511215529967651395948372939656243625509415431025603561566525939902404061373722845911030426935524540618836483047903168522761507693415353166369798302487844871482466277857369536790460552074433365145037391271066206203236309086428893962143305688894899017487665581868800315137956383134320393321172713118078361257985552005289196540504609084187891109179418597396618998593301320618463497465650394289931490063233088609592664183223525084812244905262611683020583520508344325328615763664446254751911764044210018537850216466360484868393713657300257696751408359031493058176603300046449992140284093053318956215075489991898879715188122663110068642390221809491213828320852345850452853822226984704427687019000322043165568548503526869279619941712521355641215401870043827490340097276368597968982484264686533126349132557598856774931340401887402732330678359237029957136064669522137059423777725507226997209927289271747777915306094915143435847776709740057773102479554907977093981951558083300830650448696188313967646292412901260614862333753713658245086539820481509861083609417336059577843468459863780457772527172198064299620"
		case .bruns:
			return "1.902160583104"
		case .ln2:
			return "0.693147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481020570685733685520235758130557032670751635075959043238263654720704089640510532271970375726344921950858035417124714912314546214182798108239226369440201888631329886376255827209736821913480211527584313264185952408099401099040526332150515212569979487817201690474612331651057798250602209992709097350320257437865347934491062772207694119122054453281616287390061029415962943215403823064062644107608757693467406600566914309126855805546743040289480247870622790040954808428771547439829159110400686553119248381171266661890476492124201098599460220142614344256295489851167439165440359961124958288488500211521913695607953028561972198430593993901647212737846749050770048200186455486922332339046475600515373471424911389885531971586120445224632000800595434176974152489296172196198300611604186124962373598541916997025234596103753245855588943782459252314629556481543024047602324797237066447126895940354777290224281396216166257999378721976659590803379110382349503299852111852615343364421600807107792913887704055352988265841526149011707979842940880388566060421737560370592197673181410650543481773904864763532086846666273"
		case .pisquare:
			return "6.283185307179586476925286766559005768394338798750211641949889184615632812572417997256069650684234135964296173026564613294187689219101164463450718816256962234900568205403877042211119289245897909860763928857621951331866892256951296467573566330542403818291297133846920697220908653296426787214520498282547449174013212631176349763041841925658508183430728735785180720022661061097640933042768293903883023218866114540731519183906184372234763865223586210237096148924759925499134703771505449782455876366023898259667346724881313286172042789892790449474381404359721887405541078434352586353504769349636935338810264001136254290527121655571542685515579218347274357442936881802449906860293099170742101584559378517847084039912224258043921728068836319627259549542619921037414422699999996745956099902119463465632192637190048918910693816605285044616506689370070523862376342020006275677505773175066416762841234355338294607196506980857510937462319125727764707575187503915563715561064342453613226003855753222391818432840397876190514402130971726557731872306763655936460603904070603705937991547245198827782499443550566958263031149714484908301391901659066233723455711778150196763509274929878638510120801855403342278019697648025716723"
		case .mill:
			return "1.30637788386308069046861449260260571291678458515671364436805375996643405376682659882150140370119739570729696093810308688223886144781635348688713392214619435345787110033188140509357535583193264801721383236152235906221860161085667905721519797609516199295279707992563172152784123713076584911245631751842633105652153513186684155079079372385923352208421842040532051768902602579344300869529063620569896872621227499787666438515766191438772844982077590564825560915004123788524793626088046688154064374425340131073611440941376503643793012676721171310302652283866154666880487476095144107907540698417260347310774677574064007810935083421437442654204085311165490420993090855747058348793757769523336364858305492927387281493416741250273266926840468154062676311322374882380011804120628601384191443885715160918938894478991212554338474935909274442208280226020332302710637502228813106477844481700372333640604211874260838332822176968781235304962300880267221110401606508880971834777831402249082184410637749400023282419270071233303228854128584088916313729295257781669730936517951304701393525757057288415991731506781288275420005462290126288405806701552761743270631625705587885293887371663631869096785158480771725887503591755610651534304682508915720529218979451918656896107079679454091800398939472486242136261078017853543289004499330170496366824138991559390863407971519521054913832178750248935369436911007271030372613750972234285323116168628543944188065497"
			//return "1.3063778838630806904686144926026057129167845851567136443680537599664340537668265988215014037011973957"
		}
	}
	
	#if false
	private func Value(type : MathConstantType) -> BigFloat {
		switch type {
		case .pi:
			return BigFloatConstant.pi
		case .e:
			return BigFloatConstant.e
		case .root2:
			return BigFloatConstant.sqrt2
		case .ln2:
			return BigFloatConstant.ln2
		case .gamma:
			return BigFloatConstant.gamma
		case .mill:
			return BigFloatConstant.mills
		case .bruns:
			return BigFloatConstant.bruns
		case .pisquare:
			return BigFloatConstant.pi2
		case .phi:
			return BigFloatConstant.phi
		case .crt2:
			return BigFloatConstant.crt2
		}
	}
	#endif
}



class MathConstantTester : NumTester {
	
	internal func FindConst(n : BigUInt) -> (type : MathConstantType, digits: Int)? {
		let nstr = String(n)
		if nstr.count < 3 { return nil }
		//Decimal Digits
		for c in MathConstantType.allValues {
			let cstr = c.asString()
			if testStr(nstr: nstr, cstr: cstr) {
				return (c,nstr.count)
			}
		}
		return nil
	}
	
	internal func FindRational(n: BigUInt) -> (type : MathConstantType, n: BigInt, d: BigInt, index: Int)? {
		for type in MathConstantType.allValues {
			guard let (oeis_n_nr,oeis_d_nr,_) = type.OEISRational() else { continue }
			if !OEIS.shared.ContainsNumber(oeisnr: oeis_n_nr, n: n) { continue }
			guard let seqn = OEIS.shared.GetSequence(oeisnr: oeis_n_nr) else { continue }
			guard let seqd = OEIS.shared.GetSequence(oeisnr: oeis_d_nr) else { continue }
			
			for i in 0..<seqn.count {
				if seqn[i] == n {
					return (type,seqn[i],seqd[i],i)
				}
			}
		}
		return nil
	}
	
	private func testStr(nstr: String, cstr : String) -> Bool
	{
		let nc = Array(nstr)
		let cc = Array(cstr)
		if nc.count<=1 { return false }
		for i in 0..<nc.count {
			if i >= cc.count-1 { return false }
			if nc[i] != cc[i] { return false }
		}
		return true
	}
	
	func isSpecial(n: BigUInt) -> Bool {
		if n < BigUInt(10) { return false }
		if FindConst(n: n) != nil {
			return true
		}
		if FindRational(n: n) != nil {
			return true
		}
		return false
	}
	
	func getConstant(n: BigUInt) -> String? {
		guard let (type,_) = FindConst(n: n) else { return nil }
		return type.asString()
	}
	
	func getDesc(n: BigUInt) -> String? {
		let desc = WikiLinks.shared.getLink(tester: self, n: n)
		return desc
	}
	
	private func moreLatex(type: MathConstantType) -> String {
		switch type {
		case .pi:
			return "\\frac{4}{\\pi} = \\prod_{k=2}^{\\infty} (1 - \\frac{\\chi(p_k)}{p_k})"
		case .pisquare:
			return "\\frac{6}{\\pi^2} = \\frac{1}{\\zeta(2)} = \\prod_{p \\in \\mathbb{P}} (1-\\frac{1}{p^2})"
		case .ln2:
			return "\\prod_{p \\leq x}(1-\\frac{1}{p}) \\sim \\frac{e^{-\\gamma}}{ln x}"
		case .bruns:
			return "B_2 = \\sum_{p,p+2 \\in \\mathbb{P}} (\\frac{1}{p} + \\frac{1}{p+2})"
		case .gamma:
			return "\\gamma = \\lim\\limits_{n \\rightarrow \\infty}{\\sum_{k=1}^{n} \\frac{1}{k} - ln{ }n}"
		default:
			return ""
		}
	}
	func getLatex(n: BigUInt) -> String? {
		var latex = ""
		var morelatex = ""
		if !isSpecial(n: n) { return nil }
		
		if let (type,digits) = FindConst(n: n)
		{
			let latexname = type.Latex()
			let pot = type.withPot()
			
			latex = String(n)
			latex = latex + "\\cdot{10^{-" + String(digits-1-pot) + "}} \\approx "
			latex = latex + latexname + "=" + String(type.asDouble()) + "..."
			morelatex = moreLatex(type: type)
		}
		if let (type,num,denom,index) = FindRational(n: n) {
			let latexname = type.Latex()
			guard let (_,_,oeiscf) = type.OEISRational() else { return nil }
			if !latex.isEmpty { latex = latex + "\\\\" }
			latex = latex + latexname + " \\approx " + "\\frac{"
			latex = latex + String(num) + "}{" + String(denom) + "} ="
			guard let seq = OEIS.shared.GetSequence(key: oeiscf) else { return nil }
			for i in 0...index {
				if i == 0 {
					latex = latex + String(seq[0]) + " + "
				} else if i < index {
					latex = latex + "\\frac{1}{" + String(seq[i]) + "+\\text{ }}"
				} else if i == index {
					latex = latex + "\\frac{1}{" + String(seq[i]) + "}"
				}
			}
			let morelatex2 = moreLatex(type: type)
			if !morelatex.isEmpty && !morelatex2.isEmpty {
				morelatex = morelatex + "\\\\" + morelatex2
			} else {
				morelatex = morelatex2
			}
		}
		
		if !morelatex.isEmpty {
			latex = latex + "\\\\" + morelatex
		}
		return latex
	}
	
	func property() -> String {
		return "Math Constant"
	}
}

/*
class PiContinuedFractionTester : NumTester {

init() {
if PiContinuedFractionTester.rationals.isEmpty {
ComputeRationals()
}
}
private static var rationals : [(n:BigUInt,d:BigUInt)] = []

private func ComputeRationals() {
guard let seq = OEIS.shared.seq["cfpi"] else { assert(false) }
PiContinuedFractionTester.rationals = ContinuedFractions.shared.RationalSequence(seq: seq)
}
func isSpecial(n: BigUInt) -> Bool {
for r in PiContinuedFractionTester.rationals {
if r.n == n { return true }
if r.n > n { return false }
}
return false
/*
for t in MathConstantType.allValues {
let oeisnr = t.OEISnr()
if OEIS.shared.ContainsNumber(key: <#T##String#>, n: <#T##BigUInt#>)
let isspecial = OEIS.shared.ContainsNumber(key: oeisnr, n: n)
return isspecial
}
*/
}

func getLatex(n: BigUInt) -> String? {
return nil
}

func property() -> String {
return "Numerator for rational pi approximation"
}
}
*/




